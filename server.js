 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var MongoClient = require('mongodb').MongoClient;
var db;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond not found to all the wrong routes
/* app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
}); */
app.use('/new', (req, res, next) => {
  var hostURL = 'https://' + req.get('host');
  // if containing valid hyperlink
  if (/https?:\/\/.+\..+/.test(req.url)) {
    db.collection('index').findOneAndUpdate({}, {$inc: {index: 1}}, (err, docs) => {
      var urlObj = {
        'short_url': hostURL + '/' + docs.value.index.toString(),
        'original_url': req.url.replace(/^\/*/, '')
      };
      db.collection('urls').insertOne(urlObj, {forceServerObjectId: true}, (err, result) => {
        res.end(JSON.stringify(urlObj));
      });
    });
  }
  else {
    res.end(JSON.stringify({'error': 'Wrong url format, make sure you have a valid protocol and real site.'}));
  }
});

app.use(/\/\d+$/, (req, res, next) => {
  var hostURL = 'https://' + req.get('host');
  var fullURL = hostURL + req.originalUrl;
  console.log(fullURL);
  db.collection('urls').findOne({short_url: fullURL}, (err, doc) => {
    if (doc) {
      res.redirect(doc.original_url);
    }
    else {
      res.end(JSON.stringify({'error': 'No such short URL.'}));
    }
  });
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

MongoClient.connect(process.env.MURL, (err, dbConn) => {
  if (err) {
    console.log('Unable to connect to the mongoDB server. Error:', err);
  }
  else {
    console.log('Connection established to mongoDB server.');
    db = dbConn;
    app.listen(process.env.PORT, function () {
      console.log('Node.js listening ...');
    });
  }
});
